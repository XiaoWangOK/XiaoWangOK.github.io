{"meta":{"title":"XiaoWangOK","subtitle":"","description":"","author":"XiaoWangOK","url":"https://xiaowangok.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2022-11-18T07:49:46.640Z","updated":"2022-11-18T07:49:46.640Z","comments":false,"path":"/404.html","permalink":"https://xiaowangok.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2022-11-18T07:49:46.641Z","updated":"2022-11-18T07:49:46.641Z","comments":false,"path":"about/index.html","permalink":"https://xiaowangok.github.io/about/index.html","excerpt":"","text":"个人详细介绍"},{"title":"分类","date":"2022-11-18T07:49:46.643Z","updated":"2022-11-18T07:49:46.643Z","comments":false,"path":"categories/index.html","permalink":"https://xiaowangok.github.io/categories/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2022-11-18T07:49:46.644Z","updated":"2022-11-18T07:49:46.644Z","comments":false,"path":"repository/index.html","permalink":"https://xiaowangok.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-11-18T07:49:46.644Z","updated":"2022-11-18T07:49:46.644Z","comments":false,"path":"tags/index.html","permalink":"https://xiaowangok.github.io/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-11-18T07:49:46.643Z","updated":"2022-11-18T07:49:46.643Z","comments":true,"path":"links/index.html","permalink":"https://xiaowangok.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"SpringBoot中的统一异常处理","slug":"SpringBoot中的统一异常处理","date":"2022-11-27T14:25:29.000Z","updated":"2022-11-28T15:15:43.527Z","comments":true,"path":"2022/11/27/SpringBoot中的统一异常处理/","link":"","permalink":"https://xiaowangok.github.io/2022/11/27/SpringBoot%E4%B8%AD%E7%9A%84%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/","excerpt":"","text":"对自己学习过程中遇到的统一异常处理做如下记录。 全局异常处理、特定异常处理 创建异常处理类，并添加注解@ControllerAdvice，原理上是使用AOP，在不改变原先代码的基础上就能处理异常 在异常类内创建异常处理方法，添加注解@ExceptionHandler import com.xw.demo.result.Result; import org.springframework.web.bind.annotation.ControllerAdvice; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.ResponseBody; @ControllerAdvice public class GlobalExceptionHandler { //全局异常处理 @ExceptionHandler(Exception.class) @ResponseBody //或者在类上使用@RestControllerAdvice public Result error(Exception e){ e.printStackTrace(); System.out.println(\"Exception\"); return Result.fail(null).message(\"执行全局异常处理\"); } //特定异常处理 @ExceptionHandler(ArithmeticException.class) @ResponseBody public Result error(ArithmeticException e){ e.printStackTrace(); System.out.println(\"ArithmeticException\"); return Result.fail(null).message(\"执行ArithmeticException异常处理\"); } } 自定义异常处理 创建自定义异常类，继承RuntimeException 自定义异常类创建属性(异常码、异常信息等) package com.xw.demo.exception; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; @Data @AllArgsConstructor @NoArgsConstructor public class GgktException extends RuntimeException{ private Integer code; private String msg; } 在全局异常处理类添加自定义异常处理方法 import com.xw.demo.result.Result; import org.springframework.web.bind.annotation.ControllerAdvice; import org.springframework.web.bind.annotation.ExceptionHandler; import org.springframework.web.bind.annotation.ResponseBody; @ControllerAdvice public class GlobalExceptionHandler { //自定义异常类的处理 @ExceptionHandler(GgktException.class) @ResponseBody public Result error(GgktException e){ e.printStackTrace(); System.out.println(\"GgktException\"); return Result.fail(null).code(e.getCode()).message(e.getMsg()); } } 在业务代码内手动抛出异常，自定义（非jdk自带）异常需要手动抛出 try { int i= 10/0; }catch (Exception e){ throw new GgktException(201,\"执行自定义异常处理GgktException\"); }","categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://xiaowangok.github.io/categories/SpringBoot/"}],"tags":[{"name":"异常处理","slug":"异常处理","permalink":"https://xiaowangok.github.io/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"}]},{"title":"hexo搭建博客问题记录","slug":"hexo搭建博客问题记录","date":"2022-11-21T15:20:53.000Z","updated":"2022-11-28T15:29:44.327Z","comments":true,"path":"2022/11/21/hexo搭建博客问题记录/","link":"","permalink":"https://xiaowangok.github.io/2022/11/21/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/","excerpt":"","text":"记录使用hexo搭建自己的博客时遇到的问题。 theme主题使用了pure主题，使用文档见 https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md 图片显示 资源文件夹 在hexo中使用文章资源文件夹需要在配置文件_config.yaml增加配置： post_asset_folder: true 配置后使用命令 hexo new &quot;demo_test&quot; 创建文章的同时会为该文章生成一个名为 demo_test 的文件夹可以用来存放图片 图片引用 在markdown文件的编辑器中，使用 ![](./demo_test/image.jpg) 即可正常显示图片。但是hexo中的文章经过 hexo generate 后产生的文章及图片情况如下图所示 所以使用 ![](image.jpg)就OK了吗？并不是。。。hexo生成的html中对图片的引用为 /image.jpg ，但是默认的 / 根目录为 public，所以获取不到 image.jpg，可以通过插件来解决。 安装插件 npm install hexo-renderer-marked --save _config.yaml marked: prependRoot: true postAsset: true hexo-renderer-marked 插件会在hexo生成的html文件中给图片的引用追加前缀，例如 &lt;img src=&quot;/2022/11/17/demo_test/image.jpg&quot;&gt;。 这时候，md文件中只需要用 ![](image.jpg) 引入图片就行了。 博客的评论怎么用我在博客中使用的是 GitTalk，文档地址https://github.com/gitalk/gitalk/blob/master/readme-cn.md 引入 &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"> &lt;script src=\"//cdn.jsdelivr.net/npm/gitalk@1.6.2/dist/gitalk.min.js\">&lt;/script> 创建github应用 配置 在pure主题的_config.yaml comment: type: gitalk # 启用哪种评论系统 gitalk: # gitalk. https://gitalk.github.io/ enable: true owner: XiaoWangOK #必须. GitHub repository 所有者，可以是个人或者组织。 admin: XiaoWangOK #必须. GitHub repository 的所有者和合作者 (对这个 repository 有写权限的用户)。 repo: XiaoWangOK.github.io #必须. GitHub repository. ClientID: 42**1*57*98**1*fe*25 #必须. GitHub Application Client ID. ClientSecret: 147**9cb54b***d3c*405*f061***120b*da**f6 #必须. GitHub Application Client Secret. enableHotKey: true proxy: https://xxx.*****.workers.dev/https://github.com/login/oauth/access_token language: zh-CN 使用 文件gitalk.ejs，引入gitalk 过程中遇到的坑可借鉴文章https://zhuanlan.zhihu.com/p/350735142 &lt;% if (typeof(script) !== 'undefined' &amp;&amp; script) { %> &lt;link rel=\"stylesheet\" href=\"https://unpkg.com/gitalk/dist/gitalk.css\"> &lt;script src=\"//cdn.jsdelivr.net/npm/gitalk@1.6.2/dist/gitalk.min.js\">&lt;/script> &lt;script src=\"//cdn.jsdelivr.net/npm/blueimp-md5@2.10.0/js/md5.min.js\">&lt;/script> &lt;script type=\"text/javascript\"> var gitalk = new Gitalk({ clientID: '&lt;%= theme.comment.gitalk.ClientID %>', clientSecret: '&lt;%= theme.comment.gitalk.ClientSecret %>', repo: '&lt;%= theme.comment.gitalk.repo %>', owner: '&lt;%= theme.comment.gitalk.owner %>', admin: ['&lt;%= theme.comment.gitalk.admin %>'], id: md5(location.pathname), distractionFreeMode: true, language: '&lt;%= theme.comment.gitalk.language %>', enableHotKey: '&lt;%= theme.comment.gitalk.enableHotKey %>', proxy: '&lt;%= theme.comment.gitalk.proxy %>', }) gitalk.render('comments') &lt;/script> &lt;% } %> 踩坑 Gitalk进行Github的Oauth认证无法跨域获取Token问题解决 缺少CORS代理服务，登陆时会出现网络错误 Error: Network Error 或者 403异常。解决方式在：Cloudflare https://dash.cloudflare.com/login/ 上创建一个免费的在线代理来解决gitalk授权登录跨域问题，利用CloudFlare Worker创建在线代理，参考了很有效的文章：https://www.cnblogs.com/WeiyiGeek/p/16597538.html 代码块中字符被转义使用代码风格插件 hexo-prism-plugin 遇到情况如下，&#123; 和 &#125; 被转义了： 解决方法：在文件 node_modules\\hexo-prism-plugin\\src\\index.js 中做修改 const map = { '&amp;#39;': '\\'', '&amp;amp;': '&amp;', '&amp;gt;': '>', '&amp;lt;': '&lt;', '&amp;quot;': '\"', '&amp;#123;': '{', '&amp;#124;': '|', '&amp;#125;': '}' };","categories":[{"name":"博客","slug":"博客","permalink":"https://xiaowangok.github.io/categories/%E5%8D%9A%E5%AE%A2/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://xiaowangok.github.io/tags/hexo/"},{"name":"博客","slug":"博客","permalink":"https://xiaowangok.github.io/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"This is For Suki Zhu","slug":"this-is-test","date":"2022-11-17T15:34:03.000Z","updated":"2022-11-28T15:15:36.898Z","comments":true,"path":"2022/11/17/this-is-test/","link":"","permalink":"https://xiaowangok.github.io/2022/11/17/this-is-test/","excerpt":"","text":"1.hello啊啊啊~好美的照片！！！ 2.hizuozuo~","categories":[],"tags":[{"name":"love","slug":"love","permalink":"https://xiaowangok.github.io/tags/love/"}]},{"title":"我的第一篇博客","slug":"我的第一篇博客","date":"2022-11-17T08:25:14.000Z","updated":"2022-11-18T08:22:39.603Z","comments":true,"path":"2022/11/17/我的第一篇博客/","link":"","permalink":"https://xiaowangok.github.io/2022/11/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"猪猪太baby辣~ 略略略zuozuo~ public static void main(String[] args){ System.out.println(\"hello!\"); }","categories":[{"name":"test","slug":"test","permalink":"https://xiaowangok.github.io/categories/test/"}],"tags":[{"name":"test","slug":"test","permalink":"https://xiaowangok.github.io/tags/test/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-11-17T08:24:04.113Z","updated":"2022-11-17T08:24:04.113Z","comments":true,"path":"2022/11/17/hello-world/","link":"","permalink":"https://xiaowangok.github.io/2022/11/17/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://xiaowangok.github.io/categories/SpringBoot/"},{"name":"博客","slug":"博客","permalink":"https://xiaowangok.github.io/categories/%E5%8D%9A%E5%AE%A2/"},{"name":"test","slug":"test","permalink":"https://xiaowangok.github.io/categories/test/"}],"tags":[{"name":"异常处理","slug":"异常处理","permalink":"https://xiaowangok.github.io/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"},{"name":"hexo","slug":"hexo","permalink":"https://xiaowangok.github.io/tags/hexo/"},{"name":"博客","slug":"博客","permalink":"https://xiaowangok.github.io/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"love","slug":"love","permalink":"https://xiaowangok.github.io/tags/love/"},{"name":"test","slug":"test","permalink":"https://xiaowangok.github.io/tags/test/"}]}
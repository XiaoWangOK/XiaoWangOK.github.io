<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot中的统一异常处理</title>
      <link href="/2022/11/27/SpringBoot%E4%B8%AD%E7%9A%84%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>/2022/11/27/SpringBoot%E4%B8%AD%E7%9A%84%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>对自己学习过程中遇到的统一异常处理做如下记录。</p><h2 id="全局异常处理、特定异常处理"><a href="#全局异常处理、特定异常处理" class="headerlink" title="全局异常处理、特定异常处理"></a>全局异常处理、特定异常处理</h2><ol><li>创建异常处理类，并添加注解<code>@ControllerAdvice</code>，原理上是使用AOP，在不改变原先代码的基础上就能处理异常</li><li>在异常类内创建异常处理方法，添加注解<code>@ExceptionHandler</code></li></ol><pre><code class="java">import com.xw.demo.result.Result;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.ResponseBody;@ControllerAdvicepublic class GlobalExceptionHandler &#123;    //全局异常处理    @ExceptionHandler(Exception.class)    @ResponseBody //或者在类上使用@RestControllerAdvice    public Result error(Exception e)&#123;        e.printStackTrace();        System.out.println(&quot;Exception&quot;);        return Result.fail(null).message(&quot;执行全局异常处理&quot;);    &#125;    //特定异常处理    @ExceptionHandler(ArithmeticException.class)    @ResponseBody    public Result error(ArithmeticException e)&#123;        e.printStackTrace();        System.out.println(&quot;ArithmeticException&quot;);        return Result.fail(null).message(&quot;执行ArithmeticException异常处理&quot;);    &#125;&#125;</code></pre><h2 id="自定义异常处理"><a href="#自定义异常处理" class="headerlink" title="自定义异常处理"></a>自定义异常处理</h2><ol><li><p>创建自定义异常类，继承<code>RuntimeException</code></p></li><li><p>自定义异常类创建属性(异常码、异常信息等)</p><pre><code class="java">package com.xw.demo.exception;import lombok.AllArgsConstructor;import lombok.Data;import lombok.NoArgsConstructor;@Data@AllArgsConstructor@NoArgsConstructorpublic class GgktException extends RuntimeException&#123;    private Integer code;    private String msg;&#125;</code></pre></li><li><p>在全局异常处理类添加自定义异常处理方法</p><pre><code class="java">import com.xw.demo.result.Result;import org.springframework.web.bind.annotation.ControllerAdvice;import org.springframework.web.bind.annotation.ExceptionHandler;import org.springframework.web.bind.annotation.ResponseBody;@ControllerAdvicepublic class GlobalExceptionHandler &#123;    //自定义异常类的处理    @ExceptionHandler(GgktException.class)    @ResponseBody    public Result error(GgktException e)&#123;        e.printStackTrace();        System.out.println(&quot;GgktException&quot;);        return Result.fail(null).code(e.getCode()).message(e.getMsg());    &#125;&#125;</code></pre></li><li><p>在业务代码内手动抛出异常，自定义（非jdk自带）异常需要手动抛出</p><pre><code class="java">try &#123;    int i= 10/0;&#125;catch (Exception e)&#123;    throw new GgktException(201,&quot;执行自定义异常处理GgktException&quot;);&#125;</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo搭建博客问题记录</title>
      <link href="/2022/11/21/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/11/21/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>记录使用hexo搭建自己的博客时遇到的问题。</p><h2 id="theme主题"><a href="#theme主题" class="headerlink" title="theme主题"></a>theme主题</h2><p>使用了pure主题，使用文档见 <a href="https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md">https://github.com/cofess/hexo-theme-pure/blob/master/README.cn.md</a></p><h2 id="图片显示"><a href="#图片显示" class="headerlink" title="图片显示"></a>图片显示</h2><ol><li><p>资源文件夹</p><p> 在hexo中使用文章资源文件夹需要在配置文件<code>_config.yaml</code>增加配置：</p><pre><code class="yaml">post_asset_folder: true</code></pre><p> 配置后使用命令 <code>hexo new &quot;demo_test&quot;</code> 创建文章的同时会为该文章生成一个名为 <code>demo_test</code> 的文件夹可以用来存放图片</p></li><li><p>图片引用</p><p> 在markdown文件的编辑器中，使用 <code>![](./demo_test/image.jpg)</code> 即可正常显示图片。但是hexo中的文章经过 <code>hexo generate</code> 后产生的文章及图片情况如下图所示<br> <img src="/./hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/dir.png"><br> 所以使用 <code>![](image.jpg)</code>就OK了吗？并不是。。。hexo生成的html中对图片的引用为 <code>/image.jpg</code> ，但是默认的 <code>/</code> 根目录为 <code>public</code>，所以获取不到 <code>image.jpg</code>，可以通过插件来解决。</p><p> <strong>安装插件</strong></p><pre><code class="shell">npm install hexo-renderer-marked --save</code></pre><p> <strong>_config.yaml</strong></p><pre><code>marked:prependRoot: truepostAsset: true</code></pre><p> <code>hexo-renderer-marked</code> 插件会在hexo生成的<strong>html</strong>文件中给图片的引用追加前缀，例如 <code>&lt;img src=&quot;/2022/11/17/demo_test/image.jpg&quot;&gt;</code>。<br> 这时候，md文件中只需要用 <code>![](image.jpg)</code> 引入图片就行了。</p></li></ol><h2 id="博客的评论怎么用"><a href="#博客的评论怎么用" class="headerlink" title="博客的评论怎么用"></a>博客的评论怎么用</h2><p>我在博客中使用的是 <a href="https://github.com/gitalk/gitalk">GitTalk</a>，文档地址<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md">https://github.com/gitalk/gitalk/blob/master/readme-cn.md</a></p><ol><li><p>引入</p><pre><code class="js">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;&lt;script src=&quot;//cdn.jsdelivr.net/npm/gitalk@1.6.2/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</code></pre></li><li><p>创建github应用<br> <img src="/./hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95/oath.png"></p></li><li><p>配置<br> 在pure主题的_config.yaml</p><pre><code class="yaml">    comment:        type: gitalk  # 启用哪种评论系统        gitalk: # gitalk. https://gitalk.github.io/        enable: true        owner: XiaoWangOK #必须. GitHub repository 所有者，可以是个人或者组织。        admin: XiaoWangOK #必须. GitHub repository 的所有者和合作者 (对这个 repository 有写权限的用户)。        repo: XiaoWangOK.github.io #必须. GitHub repository.        ClientID: 427a1f57c981f17fe125 #必须. GitHub Application Client ID.        ClientSecret: 147c89cb54bea3d3c0405ef061b7c120bcdaadf6 #必须. GitHub Application Client Secret.        enableHotKey: true        proxy: https://cors-try.xiaowang-ok.workers.dev/https://github.com/login/oauth/access_token        language: zh-CN</code></pre></li><li><p>使用</p><p> 文件gitalk.ejs，引入gitalk<br> 过程中遇到的坑可借鉴文章<a href="https://zhuanlan.zhihu.com/p/350735142">https://zhuanlan.zhihu.com/p/350735142</a></p><pre><code class="js">&lt;% if (typeof(script) !== &#39;undefined&#39; &amp;&amp; script) &#123; %&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;    &lt;script src=&quot;//cdn.jsdelivr.net/npm/gitalk@1.6.2/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;    &lt;script src=&quot;//cdn.jsdelivr.net/npm/blueimp-md5@2.10.0/js/md5.min.js&quot;&gt;&lt;/script&gt;    &lt;script type=&quot;text/javascript&quot;&gt;    var gitalk = new Gitalk(&#123;        clientID: &#39;&lt;%= theme.comment.gitalk.ClientID %&gt;&#39;,        clientSecret: &#39;&lt;%= theme.comment.gitalk.ClientSecret %&gt;&#39;,        repo: &#39;&lt;%= theme.comment.gitalk.repo %&gt;&#39;,        owner: &#39;&lt;%= theme.comment.gitalk.owner %&gt;&#39;,        admin: [&#39;&lt;%= theme.comment.gitalk.admin %&gt;&#39;],        id: md5(location.pathname),        distractionFreeMode: true,        language: &#39;&lt;%= theme.comment.gitalk.language %&gt;&#39;,        enableHotKey: &#39;&lt;%= theme.comment.gitalk.enableHotKey %&gt;&#39;,        proxy: &#39;&lt;%= theme.comment.gitalk.proxy %&gt;&#39;,    &#125;)    gitalk.render(&#39;comments&#39;)    &lt;/script&gt;&lt;% &#125; %&gt;</code></pre></li><li><p>踩坑</p><p> <em><strong>Gitalk进行Github的Oauth认证无法跨域获取Token问题解决</strong></em></p><p> 缺少CORS代理服务，登陆时会出现网络错误 Error: Network Error 或者 403异常。解决方式在：<strong>Cloudflare <a href="https://dash.cloudflare.com/login/">https://dash.cloudflare.com/login/</a> 上创建一个免费的在线代理来解决gitalk授权登录跨域问题，利用CloudFlare Worker创建在线代理</strong>，参考了很有效的文章：<a href="https://www.cnblogs.com/WeiyiGeek/p/16597538.html">https://www.cnblogs.com/WeiyiGeek/p/16597538.html</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>This is For Suki Zhu</title>
      <link href="/2022/11/17/this-is-test/"/>
      <url>/2022/11/17/this-is-test/</url>
      
        <content type="html"><![CDATA[<h2 id="1-hello"><a href="#1-hello" class="headerlink" title="1.hello"></a>1.hello</h2><p>啊啊啊~好美的照片！！！</p><h2 id="2-hi"><a href="#2-hi" class="headerlink" title="2.hi"></a>2.hi</h2><p>zuozuo~</p><p><img src="/2022/11/17/this-is-test/us.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> love </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2022/11/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/11/17/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="猪猪"><a href="#猪猪" class="headerlink" title="猪猪"></a>猪猪</h2><p>太baby辣~</p><hr><h2 id="略略略"><a href="#略略略" class="headerlink" title="略略略"></a>略略略</h2><p>zuozuo~</p><pre><code class="java">public static void main(String[] args)&#123;    System.out.println(&quot;hello!&quot;);&#125;</code></pre><hr><!-- ![]() -->]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/11/17/hello-world/"/>
      <url>/2022/11/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
